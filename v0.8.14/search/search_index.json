{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shoutrrr","text":"<p> Notification library for gophers and their furry friends. Heavily inspired by caronc/apprise. </p> <p> </p> <p>To make it easy and streamlined to consume shoutrrr regardless of the notification service you want to use, we've implemented a notification service url schema. To send notifications, instantiate the <code>ShoutrrrClient</code> using one of the service urls from the overview.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#as_a_package","title":"As a package","text":"<p>Using shoutrrr is easy! There is currently two ways of using it as a package.</p>"},{"location":"getting-started/#using_the_direct_send_command","title":"Using the direct send command","text":"<p>Easiest to use, but very limited.</p> <pre><code>url := \"slack://token-a/token-b/token-c\"\nerr := shoutrrr.Send(url, \"Hello world (or slack channel) !\")\n</code></pre>"},{"location":"getting-started/#using_a_sender","title":"Using a sender","text":"<p>Using a sender gives you the ability to preconfigure multiple notification services and send to all of them with the same <code>Send(message, params)</code> method.</p> <pre><code>urlA := \"slack://token-a/token-b/token-c\"\nurlB := \"telegram://110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw@telegram?channels=@mychannel\"\nsender, err := shoutrrr.CreateSender(urlA, urlB)\n\n// Send notifications instantly to all services\nsender.Send(\"Hello world (or slack/telegram channel)!\", map[string]string { \"title\": \"He-hey~!\"  })\n\n// ...or bundle notifications... \nfunc doWork() error {\n    // ...and send them when leaving the scope\n    defer sender.Flush(map[string]string { \"title\": \"Work Result\" })\n\n    sender.Enqueue(\"Started doing %v\", stuff)\n\n    // Maybe get creative...?\n    defer func(start time.Time) { \n        sender.Enqueue(\"Elapsed: %v\", time.Now().Sub(start)) \n    }(time.Now())\n\n    if err := doMoreWork(); err != nil {\n        sender.Enqueue(\"Oh no! %v\", err)\n\n        // This will send the currently queued up messages...\n        return\n    }   \n\n    sender.Enqueue(\"Everything went very well!\")\n\n    // ...or this:\n}\n</code></pre>"},{"location":"getting-started/#through_the_cli","title":"Through the CLI","text":"<p>Start by running the <code>build.sh</code> script. You may then run the shoutrrr executable:</p> <pre><code>$ ./shoutrrr\n\nUsage:\n./shoutrrr &lt;ActionVerb&gt; [...]\nPossible actions: send, verify, generate\n</code></pre> <p>On a system with Go installed you can install the latest Shoutrrr CLI command with:</p> <pre><code>go install github.com/nicholas-fedor/shoutrrr/shoutrrr@latest\n</code></pre>"},{"location":"getting-started/#commands","title":"Commands","text":""},{"location":"getting-started/#send","title":"Send","text":"<p>Send a notification using the supplied notification service url.</p> <pre><code>$ shoutrrr send \\\n    --url \"&lt;SERVICE_URL&gt;\" \\\n    --message \"&lt;MESSAGE BODY&gt;\"\n</code></pre>"},{"location":"getting-started/#verify","title":"Verify","text":"<p>Verify the validity of a notification service url.</p> <pre><code>$ shoutrrr verify \\\n    --url \"&lt;SERVICE_URL&gt;\"\n</code></pre>"},{"location":"getting-started/#generate","title":"Generate","text":"<p>Generate and display the configuration for a notification service url.</p> <pre><code>$ shoutrrr generate [OPTIONS] &lt;SERVICE&gt;\n</code></pre> Flags Description <code>-g, --generator string</code> The generator to use (default \"basic\") <code>-p, --property stringArray</code> Configuration property in key=value format <code>-s, --service string</code> The notification service to generate a URL for <p>Note: Service can either be supplied as the first argument or using the <code>-s</code> flag.</p> <p>For more information on generators, see Generators.</p>"},{"location":"getting-started/#options","title":"Options","text":""},{"location":"getting-started/#debug","title":"Debug","text":"<p>Enables debug output from the CLI.</p> Flags Env. Default Required <code>--debug</code>, <code>-d</code> <code>SHOUTRRR_DEBUG</code> <code>false</code>"},{"location":"getting-started/#url","title":"URL","text":"<p>The target url for the notifications generated, see overview.</p> Flags Env. Default Required <code>--url</code>, <code>-u</code> <code>SHOUTRRR_URL</code> N/A \u2705"},{"location":"getting-started/#from_a_github_actions_workflow","title":"From a GitHub Actions workflow","text":"<p>You can also use Shoutrrr from a GitHub Actions workflow.</p> <p>See this example and the action on GitHub Marketplace:</p> <pre><code>name: Deploy\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Some other steps needed for deploying\n        run: ...\n      - name: Shoutrrr\n        uses: nicholas-fedor/shoutrrr-action@v1\n        with:\n          url: ${{ secrets.SHOUTRRR_URL }}\n          title: Deployed ${{ github.sha }}\n          message: See changes at ${{ github.event.compare }}.\n</code></pre>"},{"location":"proxy/","title":"Proxy","text":"<p>To use a proxy with shoutrrr, you could either set the proxy URL in the environment variable <code>HTTP_PROXY</code> or override the default HTTP client like this:</p> <pre><code>proxyurl, err := url.Parse(\"socks5://localhost:1337\")\nif err != nil {\n    log.Fatalf(\"Error parsing proxy URL: %q\", err)\n}\n\nhttp.DefaultClient.Transport = &amp;http.Transport{\n    Proxy: http.ProxyURL(proxyurl),\n    DialContext: (&amp;net.Dialer{\n        Timeout:   30 * time.Second,\n        KeepAlive: 30 * time.Second,\n    }).DialContext,\n    ForceAttemptHTTP2:     true,\n    MaxIdleConns:          100,\n    IdleConnTimeout:       90 * time.Second,\n    TLSHandshakeTimeout:   10 * time.Second,\n    ExpectContinueTimeout: 1 * time.Second,\n}\n</code></pre>"},{"location":"examples/generic/","title":"Examples","text":"<p>Examples of service URLs that can be used with the generic service together with common service providers.</p>"},{"location":"examples/generic/#home_assistant","title":"Home Assistant","text":"<p>The service URL needs to be: <pre><code>generic://HAIPAddress:HAPort/api/webhook/WebhookIDFromHA?template=json\n</code></pre></p> <p>And, if you need http:// <pre><code>generic://HAIPAddress:HAPort/api/webhook/WebhookIDFromHA?template=json&amp;disabletls=yes\n</code></pre></p> <p>Then, in HA, use <code>{{ trigger.json.message }}</code> to get the message sent from the JSON.</p> <p>Credit @JeffCrum1, source: [https://github.com/nicholas-fedor/shoutrrr/issues/325#issuecomment-1460105065]</p>"},{"location":"generators/basic/","title":"Basic generator","text":"<p>The basic generator looks at the <code>key:\"\"</code>, <code>desc:\"\"</code> and <code>default:\"\"</code> tags on service configuration structs and uses them to ask the user to fill in their corresponding values.</p> <p>Example:</p> <pre><code>shoutrrr generate telegram\n</code></pre> <pre><code>Generating URL for telegram using basic generator\nEnter the configuration values as prompted\n\nToken: 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw\nPreview[Yes]: No\nNotification[Yes]:\nParseMode[None]:\nChannels: @mychannel\n\nURL: telegram://110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw@telegram?channels=@mychannel&amp;notification=Yes&amp;parsemode=None&amp;preview=No\n</code></pre>"},{"location":"generators/overview/","title":"Generators","text":"<p>Generators are used to create service configurations via the command line. The main generator is the reflection based Basic generator that aims to be able to generator configurations for all the core services via a set of simple questions.</p>"},{"location":"generators/overview/#usage","title":"Usage","text":"<pre><code>shoutrrr generate [OPTIONS] -g &lt;GENERATOR&gt; &lt;SERVICE&gt;\n</code></pre>"},{"location":"guides/slack/","title":"Slack Guides","text":"<p>Guides for setting up the Slack service</p>"},{"location":"guides/slack/#getting_a_token","title":"Getting a token","text":"<p>To enable all features, either the Legacy Webhook- (deprecated and might stop working) or the bot API tokens needs to be used. Only use the non-legacy Webhook if you don't need to customize the bot name or icon.</p>"},{"location":"guides/slack/#bot_api_preferred","title":"Bot API (preferred)","text":"<ol> <li>Create a new App for your bot using the Basic app setup guide</li> <li>Install the App into your workspace (slack docs).</li> <li> <p>From Apps, select your new App and go to Oauth &amp; Permissions </p> </li> <li> <p>Copy the Bot User OAuth Token   </p> </li> </ol> <p>Example</p> <p>Given the API token <pre><code>xoxb-123456789012-1234567890123-4mt0t4l1YL3g1T5L4cK70k3N</code></pre> and the channel ID <code>C001CH4NN3L</code> (obtained by using the guide below), the Shoutrrr URL should look like this: <pre><code>slack://xoxb:123456789012-1234567890123-4mt0t4l1YL3g1T5L4cK70k3N@C001CH4NN3L</code></pre></p>"},{"location":"guides/slack/#webhook_tokens","title":"Webhook tokens","text":"<p>Get a Webhook URL using the legacy WebHooks Integration,  or by using the Getting started with Incoming Webhooks guide and replace the initial <code>https://hooks.slack.com/services/</code> part of the webhook URL with <code>slack://hook:</code> to get your Shoutrrr URL.</p> <p>Slack Webhook URL</p> <p><code>https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX</code></p> <p>Shoutrrr URL</p> <p><code>slack://hook:T00000000-B00000000-XXXXXXXXXXXXXXXXXXXXXXXX@webhook</code></p>"},{"location":"guides/slack/#getting_the_channel_id","title":"Getting the Channel ID","text":"<p>Only needed for API token. Use <code>webhook</code> as the channel for webhook tokens.</p> <ol> <li> <p>In the channel you wish to post to, open Channel Details by clicking on the channel title.   </p> </li> <li> <p>Copy the Channel ID from the bottom of the popup and append it to your Shoutrrr URL   </p> </li> </ol>"},{"location":"services/bark/","title":"Bark","text":"<p>Upstream docs: https://github.com/Finb/Bark</p>"},{"location":"services/bark/#url_format","title":"URL Format","text":""},{"location":"services/bark/#url_fields","title":"URL Fields","text":"<ul> <li>DeviceKey - The key for each device (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Host - Server hostname and port (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Path - Server path   Default: <code>/</code>   URL part: <code>bark://:devicekey@host/path/</code> </li> </ul>"},{"location":"services/bark/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Badge - The number displayed next to App icon   Default: <code>0</code> </p> </li> <li> <p>Category - Reserved field, no use yet   Default: empty </p> </li> <li> <p>Copy - The value to be copied   Default: empty </p> </li> <li> <p>Group - The group of the notification   Default: empty </p> </li> <li> <p>Icon - An url to the icon, available only on iOS 15 or later   Default: empty </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Sound - Value from https://github.com/Finb/Bark/tree/master/Sounds   Default: empty </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>URL - Url that will jump when click notification   Default: empty </p> </li> </ul>"},{"location":"services/discord/","title":"Discord","text":""},{"location":"services/discord/#url_format","title":"URL Format","text":"<p>Your Discord Webhook-URL will look like this:</p> <p>https://discord.com/api/webhooks/<code>webhookid</code>/<code>token</code></p> <p>The shoutrrr service URL should look like this:</p> <p>discord://<code>token</code>@<code>webhookid</code>[?thread_id=<code>threadid</code>]</p>"},{"location":"services/discord/#thread_support","title":"Thread Support","text":"<p>To send messages to a specific thread in a Discord channel, include the <code>thread_id</code> query parameter in the service URL with the ID of the target thread. For example:</p> <p>discord://<code>token</code>@<code>webhookid</code>?thread_id=123456789</p> <p>You can obtain the <code>thread_id</code> by right-clicking a thread in Discord and selecting \"Copy ID\" (requires Developer Mode to be enabled in Discord settings).</p>"},{"location":"services/discord/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>discord://token@webhookid/</code> </li> <li>WebhookID (Required)   URL part: <code>discord://token@webhookid/</code> </li> </ul>"},{"location":"services/discord/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Avatar - Override the webhook default avatar with specified URL   Default: empty   Aliases: <code>avatarurl</code> </p> </li> <li> <p>Color - The color of the left border for plain messages   Default: <code>0x50D9ff</code> </p> </li> <li> <p>ColorDebug - The color of the left border for debug messages   Default: <code>0x7b00ab</code> </p> </li> <li> <p>ColorError - The color of the left border for error messages   Default: <code>0xd60510</code> </p> </li> <li> <p>ColorInfo - The color of the left border for info messages   Default: <code>0x2488ff</code> </p> </li> <li> <p>ColorWarn - The color of the left border for warning messages   Default: <code>0xffc441</code> </p> </li> <li> <p>JSON - Whether to send the whole message as the JSON payload instead of using it as the 'content' field   Default: \u274c <code>No</code> </p> </li> <li> <p>SplitLines - Whether to send each line as a separate embedded item   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ThreadID - The thread ID to send the message to   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>Username - Override the webhook default username   Default: empty </p> </li> </ul>"},{"location":"services/discord/#creating_a_webhook_in_discord","title":"Creating a webhook in Discord","text":"<ol> <li> <p>Open your channel settings by first clicking on the gear icon next to the name of the channel. </p> </li> <li> <p>In the menu on the left, click on Integrations. </p> </li> <li> <p>In the menu on the right, click on Create Webhook. </p> </li> <li> <p>Set the name, channel, and icon to your liking and click the Copy Webhook URL button. </p> </li> <li> <p>Press the Save Changes button. </p> </li> <li> <p>Format the service URL: <pre><code>https://discord.com/api/webhooks/693853386302554172/W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ\n                                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                     webhook id                                    token\n\ndiscord://W3dE2OZz4C13_4z_uHfDOoC7BqTW288s-z1ykqI0iJnY_HjRqMGO8Sc7YDqvf_KVKjhJ@693853386302554172?thread_id=123456789\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                          token                                    webhook id           thread id\n</code></pre></p> </li> </ol>"},{"location":"services/email/","title":"Email","text":""},{"location":"services/email/#url_format","title":"URL Format","text":"<p>smtp://<code>username</code>:<code>password</code>@<code>host</code>:<code>port</code>/?from=<code>fromAddress</code>&amp;to=<code>recipient1</code>[,<code>recipient2</code>,...]</p>"},{"location":"services/email/#url_fields","title":"URL Fields","text":"<ul> <li>Username - SMTP server username   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Password - SMTP server password or hash (for OAuth2)   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Host - SMTP server hostname or IP address (Required)   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Port - SMTP server port, common ones are 25, 465, 587 or 2525   Default: <code>25</code>   URL part: <code>smtp://username:password@host:port/</code> </li> </ul>"},{"location":"services/email/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>FromAddress - E-mail address that the mail are sent from (Required)   Aliases: <code>from</code> </p> </li> <li> <p>ToAddresses - List of recipient e-mails (Required)   Aliases: <code>to</code> </p> </li> <li> <p>Auth - SMTP authentication method   Default: <code>Unknown</code>   Possible values: <code>None</code>, <code>Plain</code>, <code>CRAMMD5</code>, <code>Unknown</code>, <code>OAuth2</code> </p> </li> <li> <p>ClientHost - SMTP client hostname   Default: <code>localhost</code> </p> </li> <li> <p>Encryption - Encryption method   Default: <code>Auto</code>   Possible values: <code>None</code>, <code>ExplicitTLS</code>, <code>ImplicitTLS</code>, <code>Auto</code> </p> </li> <li> <p>FromName - Name of the sender   Default: empty </p> </li> <li> <p>Subject - The subject of the sent mail   Default: <code>Shoutrrr Notification</code>   Aliases: <code>title</code> </p> </li> <li> <p>UseHTML - Whether the message being sent is in HTML   Default: \u274c <code>No</code> </p> </li> <li> <p>UseStartTLS - Whether to use StartTLS encryption   Default: \u2714 <code>Yes</code>   Aliases: <code>starttls</code> </p> </li> </ul>"},{"location":"services/generic/","title":"Generic","text":"<p>The Generic service can be used for any target that is not explicitly supported by Shoutrrr, as long as it supports receiving the message via a POST request. Usually, this requires customization on the receiving end to interpret the payload that it receives, and might not be a viable approach.</p> <p>Common examples for use with service providers can be found under examples.</p>"},{"location":"services/generic/#custom_headers","title":"Custom headers","text":"<p>You can add additional HTTP headers to your request by adding query variables prefixed with <code>@</code> (<code>@key=value</code>).</p> <p>Using  <pre><code>generic://example.com?@acceptLanguage=tlh-Piqd\n</code></pre> would result in the additional header being added:</p> <pre><code>Accept-Language: tlh-Piqd\n</code></pre>"},{"location":"services/generic/#json_template","title":"JSON template","text":"<p>By using the built in <code>JSON</code> template (<code>template=json</code>) you can create a generic JSON payload. The keys used for <code>title</code> and <code>message</code> can be overriden by supplying the params/query values <code>titleKey</code> and <code>messageKey</code>.</p> <p>Example</p> <pre><code>{\n    \"title\": \"Oh no!\",\n    \"message\": \"The thing happened and now there is stuff all over the area!\"\n}\n</code></pre>"},{"location":"services/generic/#custom_data_fields","title":"Custom data fields","text":"<p>When using the JSON template, you can add additional key/value pairs to the JSON object by adding query variables prefixed with <code>$</code> (<code>$key=value</code>).</p> <p>Example</p> <p>Using <code>generic://example.com?$projection=retroazimuthal</code> would yield: </p> <pre><code>{\n    \"title\": \"Amazing opportunities!\",\n    \"message\": \"New map book available for purchase.\",\n    \"projection\": \"retroazimuthal\"\n}\n</code></pre>"},{"location":"services/generic/#shortcut_url","title":"Shortcut URL","text":"<p>You can just add <code>generic+</code> as a prefix to your target URL to use it with the generic service, so <pre><code>https://example.com/api/v1/postStuff\n</code></pre> would become <pre><code>generic+https://example.com/api/v1/postStuff\n</code></pre></p> <p>Note</p> <p>Any query variables added to the URL will be escaped so that they can be forwarded to the remote server. That means that you cannot use <code>?template=json</code> with the  <code>generic+https://</code>, just use <code>generic://</code> instead!</p>"},{"location":"services/generic/#forwarded_query_variables","title":"Forwarded query variables","text":"<p>All query variables that are not listed in the Query/Param Props section will be forwarded to the target endpoint. If you need to pass a query variable that is reserved, you can prefix it with an underscore (<code>_</code>).</p> <p>Example</p> <p>The URL <code>generic+https://example.com/api/v1/postStuff?contenttype=text/plain</code> would send a POST message to <code>https://example.com/api/v1/postStuff</code> using the <code>Content-Type: text/plain</code> header.</p> <p>If instead escaped, <code>generic+https://example.com/api/v1/postStuff?_contenttype=text/plain</code> would send a POST message to <code>https://example.com/api/v1/postStuff?contenttype=text/plain</code> using the <code>Content-Type: application/json</code> header (as it's the default).</p>"},{"location":"services/generic/#url_format","title":"URL Format","text":""},{"location":"services/generic/#url_fields","title":"URL Fields","text":""},{"location":"services/generic/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>ContentType - The value of the Content-Type header   Default: <code>application/json</code> </p> </li> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>MessageKey - The key that will be used for the message value   Default: <code>message</code> </p> </li> <li> <p>RequestMethod   Default: <code>POST</code> </p> </li> <li> <p>Template - The template used for creating the request payload   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>TitleKey - The key that will be used for the title value   Default: <code>title</code> </p> </li> </ul>"},{"location":"services/googlechat/","title":"Google Chat","text":""},{"location":"services/googlechat/#url_format","title":"URL Format","text":"<p>Your Google Chat Incoming Webhook URL will look like this:</p> <p>https://chat.googleapis.com/v1/spaces/<code>FOO</code>/messages?key=<code>bar</code>&amp;token=<code>baz</code></p> <p>The shoutrrr service URL should look like this:</p> <p>googlechat://chat.googleapis.com/v1/spaces/<code>FOO</code>/messages?key=<code>bar</code>&amp;token=<code>baz</code></p> <p>In other words the incoming webhook URL with <code>https</code> replaced by <code>googlechat</code>.</p> <p>Google Chat was previously known as Hangouts Chat. Using <code>hangouts</code> in the service URL instead <code>googlechat</code> is still supported, although deprecated.</p>"},{"location":"services/googlechat/#creating_an_incoming_webhook_in_google_chat","title":"Creating an incoming webhook in Google Chat","text":"<ol> <li> <p>Open the room you would like to add Shoutrrr to and open the chat room menu. </p> </li> <li> <p>Then click on Configure webhooks. </p> </li> <li> <p>Name the webhook and save. </p> </li> <li> <p>Copy the URL. </p> </li> <li> <p>Format the service URL by replacing <code>https</code> with <code>googlechat</code>.</p> </li> </ol>"},{"location":"services/gotify/","title":"Gotify","text":""},{"location":"services/gotify/#url_format","title":"URL Format","text":""},{"location":"services/gotify/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Server hostname (and optionally port) (Required)   URL part: <code>gotify://host:port/path/token</code> </li> <li>Path - Server subpath   Default: empty   URL part: <code>gotify://host:port/path/token</code> </li> <li>Token - Application token (Required)   URL part: <code>gotify://host:port/path/token</code> </li> </ul>"},{"location":"services/gotify/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: <code>Shoutrrr notification</code> </p> </li> </ul>"},{"location":"services/gotify/#examples","title":"Examples","text":"<p>Common usage</p> <pre><code>gotify://gotify.example.com:443/AzyoeNS.D4iJLVa/?title=Great+News&amp;priority=1\n</code></pre> <p>With subpath</p> <pre><code>gotify://example.com:443/path/to/gotify/AzyoeNS.D4iJLVa/?title=Great+News&amp;priority=1\n</code></pre>"},{"location":"services/hangouts/","title":"Hangouts Chat","text":"<p>Google Chat was previously known as Hangouts Chat. See Google Chat.</p> <p>Using <code>hangouts</code> in the service URL instead <code>googlechat</code> is still supported, although deprecated.</p>"},{"location":"services/ifttt/","title":"IFTTT","text":""},{"location":"services/ifttt/#url_format","title":"URL Format","text":"<p>ifttt://<code>key</code>/?events=<code>event1</code>[,<code>event2</code>,...]&amp;value1=<code>value1</code>&amp;value2=<code>value2</code>&amp;value3=<code>value3</code></p>"},{"location":"services/ifttt/#url_fields","title":"URL Fields","text":"<ul> <li>WebHookID (Required)   URL part: <code>ifttt://webhookid/</code> </li> </ul>"},{"location":"services/ifttt/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Events (Required)  </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>UseMessageAsValue - Sets the corresponding value field to the notification message   Default: <code>2</code> </p> </li> <li> <p>UseTitleAsValue - Sets the corresponding value field to the notification title   Default: <code>0</code> </p> </li> <li> <p>Value1   Default: empty </p> </li> <li> <p>Value2   Default: empty </p> </li> <li> <p>Value3   Default: empty </p> </li> </ul>"},{"location":"services/join/","title":"Join","text":""},{"location":"services/join/#url_format","title":"URL Format","text":"<p>join://shoutrrr:<code>api-key</code>@join/?devices=<code>device1</code>[,<code>device2</code>, ...][&amp;icon=<code>icon</code>][&amp;title=<code>title</code>]</p>"},{"location":"services/join/#url_fields","title":"URL Fields","text":"<ul> <li>APIKey (Required)   URL part: <code>join://:apikey/</code> </li> </ul>"},{"location":"services/join/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices - Comma separated list of device IDs (Required)  </p> </li> <li> <p>Icon - Icon URL   Default: empty </p> </li> <li> <p>Title - If set creates a notification   Default: empty </p> </li> </ul>"},{"location":"services/join/#guide","title":"Guide","text":"<ol> <li>Go to the Join Webapp </li> <li>Select your device</li> <li>Click Join API </li> <li>Your <code>deviceId</code> is shown in the top</li> <li>Click Show next to <code>API Key</code> to see your key </li> <li>Your Shoutrrr URL will then be:     <code>join://shoutrrr:</code><code>api-key</code><code>@join/?devices=</code><code>deviceId</code></li> </ol> <p>Multiple <code>deviceId</code>s can be combined with a <code>,</code> (repeat steps 2-4).</p>"},{"location":"services/lark/","title":"Lark","text":"<p>Send notifications to Lark using a custom bot webhook.</p>"},{"location":"services/lark/#url_format","title":"URL Format","text":"<p>lark://<code>host</code>/<code>token</code>?secret=<code>secret</code>&amp;title=<code>title</code>&amp;link=<code>url</code></p>"},{"location":"services/lark/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Custom bot URL Host   Default: <code>open.larksuite.com</code>   URL part: <code>lark://host/path/</code> </li> <li>Path - Custom bot token (Required)   URL part: <code>lark://host/path/</code> </li> </ul>"},{"location":"services/lark/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Link - Optional link URL   Default: empty </p> </li> <li> <p>Secret - Custom bot secret   Default: empty </p> </li> <li> <p>Title - Message Title   Default: empty </p> </li> <li> <p><code>host</code>: The bot API host (<code>open.larksuite.com</code> for Lark, <code>open.feishu.cn</code> for Feishu).</p> </li> <li><code>token</code>: The bot webhook token (required).</li> <li><code>secret</code>: Optional bot secret for signed requests.</li> <li><code>title</code>: Optional message title (switches to post format if set).</li> <li><code>link</code>: Optional URL to include as a clickable link in the message.</li> </ul>"},{"location":"services/lark/#example_url","title":"Example URL","text":"<pre><code>lark://open.larksuite.com/abc123?secret=xyz789&amp;title=Alert&amp;link=https://example.com\n</code></pre>"},{"location":"services/lark/#create_a_custom_bot_in_lark","title":"Create a Custom Bot in Lark","text":"<p>Official Documentation: Custom Bot Guide</p> <ol> <li> <p>Invite the Custom Bot to a Group:    a. Open the target group, click <code>More</code> in the upper-right corner, and then select <code>Settings</code>.    b. In the <code>Settings</code> panel, click <code>Group Bot</code>.    c. Click <code>Add a Bot</code> under <code>Group Bot</code>.    d. In the <code>Add Bot</code> dialog, locate <code>Custom Bot</code> and select it.    e. Set the bot\u2019s name and description, then click <code>Add</code>.    f. Copy the webhook address and click <code>Finish</code>.  </p> </li> <li> <p>Get Host and Token:</p> </li> <li>For Lark: Use <code>host = open.larksuite.com</code>.  </li> <li>For Feishu: Use <code>host = open.feishu.cn</code>.  </li> <li> <p>The <code>token</code> is the last segment of the webhook URL.     For example, in <code>https://open.larksuite.com/open-apis/bot/v2/hook/xxxxxxxxxxxxxxxxx</code>, the token is <code>xxxxxxxxxxxxxxxxx</code>.</p> </li> <li> <p>Get Secret (Optional):    a. In group settings, open the bot list, find your custom bot, and select it to access its configuration.    b. Under <code>Security Settings</code>, enable <code>Signature Verification</code>.    c. Click <code>Copy</code> to save the secret.    d. Click <code>Save</code> to apply the changes.</p> </li> </ol>"},{"location":"services/logger/","title":"Logger","text":"<p>No configuration options are available for this service.</p> <p>It simply emits notifications to the Shoutrrr log which is configured by the consumer.</p>"},{"location":"services/matrix/","title":"Matrix","text":"<p>!!! note Usage of the <code>title</code> parameter     Do note that Matrix will discard any information put in the <code>title</code> parameter as the service has no analogue to a     a title. Instead, use a custom message format to supply your wanted title as part of the message.</p>"},{"location":"services/matrix/#url_format","title":"URL Format","text":"<p>matrix://<code>user</code>:<code>password</code>@<code>host</code>:<code>port</code>/[?rooms=<code>!roomID1</code>[,<code>roomAlias2</code>]][&amp;disableTLS=yes]</p>"},{"location":"services/matrix/#url_fields","title":"URL Fields","text":"<ul> <li>User - Username or empty when using access token   Default: empty   URL part: <code>matrix://user:password@host/</code> </li> <li>Password - Password or access token (Required)   URL part: <code>matrix://user:password@host/</code> </li> <li>Host (Required)   URL part: <code>matrix://user:password@host/</code> </li> </ul>"},{"location":"services/matrix/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Rooms - Room aliases, or with ! prefix, room IDs   Default: empty   Aliases: <code>room</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/matrix/#authentication","title":"Authentication","text":"<p>If no <code>user</code> is specified, the <code>password</code> is treated as the authentication token. This means that no matter what login flow your server uses, if you can manually retrieve a token, then Shoutrrr can use it.</p>"},{"location":"services/matrix/#password_login_flow","title":"Password Login Flow","text":"<p>If a <code>user</code> and <code>password</code> is supplied, the <code>m.login.password</code> login flow is attempted if the server supports it.</p>"},{"location":"services/matrix/#rooms","title":"Rooms","text":"<p>If <code>rooms</code> are not specified, the service will send the message to all the rooms that the user has currently joined.</p> <p>Otherwise, the service will only send the message to the specified rooms. If the user is not in any of those rooms, but have been invited to it, it will automatically accept that invite.</p> <p>Note: The service will not join any rooms unless they are explicitly specified in <code>rooms</code>. If you need the user to join those rooms, you can send a notification with <code>rooms</code> explicitly set once.</p>"},{"location":"services/matrix/#room_lookup","title":"Room Lookup","text":"<p>Rooms specified in <code>rooms</code> will be treated as room IDs if the start with a <code>!</code> and used directly to identify rooms. If they have no such prefix (or use a correctly escaped <code>#</code>) they will instead be treated as aliases, and a directory lookup will be used to resolve their corresponding IDs.</p> <p>Note: Don't use unescaped <code>#</code> for the channel aliases as that will be treated as the <code>fragment</code> part of the URL. Either omit them or URL encode them, I.E. <code>rooms=%23alias:server</code> or <code>rooms=alias:server</code></p>"},{"location":"services/matrix/#tls","title":"TLS","text":"<p>If you do not have TLS enabled on the server you can disable it by providing <code>disableTLS=yes</code>. This will effectively use <code>http</code> intead of <code>https</code> for the API calls.</p>"},{"location":"services/mattermost/","title":"MatterMost","text":""},{"location":"services/mattermost/#url_format","title":"URL Format","text":"<p>mattermost://[<code>username</code>@]<code>mattermost-host</code>/<code>token</code>[/<code>channel</code>][?icon=<code>smiley</code>&amp;disabletls=<code>yes</code>]</p>"},{"location":"services/mattermost/#url_fields","title":"URL Fields","text":"<ul> <li>UserName - Override webhook user   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Host - Mattermost server host (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Token - Webhook token (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Channel - Override webhook channel   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> </ul>"},{"location":"services/mattermost/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender (not used)   Default: empty </p> </li> </ul>"},{"location":"services/mattermost/#creating_a_webhook_in_mattermost","title":"Creating a Webhook in MatterMost","text":"<ol> <li> <p>Open up the Integrations page by clicking on Integrations within the menu </p> </li> <li> <p>Click Incoming Webhooks </p> </li> <li> <p>Click Add Incoming Webhook </p> </li> <li> <p>Fill in the information for the webhook and click Save </p> </li> <li> <p>If you did everything correctly, MatterMost will give you the URL to your newly created webhook </p> </li> <li> <p>Format the service URL <pre><code>https://your-domain.com/hooks/bywsw8zt5jgpte3nm65qjiru6h\n                              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                        token\nmattermost://your-domain.com/bywsw8zt5jgpte3nm65qjiru6h\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                       token\n</code></pre></p> </li> </ol>"},{"location":"services/mattermost/#additional_url_configuration","title":"Additional URL configuration","text":"<p>Mattermost provides functionality to post as another user or to another channel, compared to the webhook configuration.  To do this, you can add a user and/or channel to the service URL.</p> <pre><code>mattermost://shoutrrrUser@your-domain.com/bywsw8zt5jgpte3nm65qjiru6h/shoutrrrChannel\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 user                               token                channel\n</code></pre>"},{"location":"services/mattermost/#passing_parameters_via_code","title":"Passing parameters via code","text":"<p>If you want to, you also have the possibility to pass parameters to the <code>send</code> function.  The following example contains all parameters that are currently supported.</p> <pre><code>params := (*types.Params)(\n    &amp;map[string]string{\n        \"username\": \"overwriteUserName\",\n        \"channel\": \"overwriteChannel\",\n        \"icon\": \"overwriteIcon\",\n    },\n)\n\nservice.Send(\"this is a message\", params)\n</code></pre> <p>This will overwrite any options, that you passed via URL.</p>"},{"location":"services/ntfy/","title":"Ntfy","text":"<p>Upstream docs: https://docs.ntfy.sh/publish/</p>"},{"location":"services/ntfy/#url_format","title":"URL Format","text":""},{"location":"services/ntfy/#url_fields","title":"URL Fields","text":"<ul> <li>Username - Auth username   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Password - Auth password   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Host - Server hostname and port   Default: <code>ntfy.sh</code>   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Topic - Target topic name (Required)   URL part: <code>ntfy://username:password@host/topic/</code> </li> </ul>"},{"location":"services/ntfy/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom user action buttons for notifications, see https://docs.ntfy.sh/publish/#action-buttons   Default: empty </p> </li> <li> <p>Attach - URL of an attachment, see attach via URL   Default: empty </p> </li> <li> <p>Cache - Cache messages   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Click - Website opened when notification is clicked   Default: empty </p> </li> <li> <p>Delay - Timestamp or duration for delayed delivery, see https://docs.ntfy.sh/publish/#scheduled-delivery   Default: empty   Aliases: <code>at</code>, <code>in</code> </p> </li> <li> <p>Email - E-mail address for e-mail notifications   Default: empty </p> </li> <li> <p>Filename - File name of the attachment   Default: empty </p> </li> <li> <p>Firebase - Send to firebase   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Icon - URL to use as notification icon   Default: empty </p> </li> <li> <p>Priority - Message priority with 1=min, 3=default and 5=max   Default: <code>default</code>   Possible values: <code>Min</code>, <code>Low</code>, <code>Default</code>, <code>High</code>, <code>Max</code> </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Tags - List of tags that may or not map to emojis   Default: empty </p> </li> <li> <p>Title - Message title   Default: empty </p> </li> </ul>"},{"location":"services/opsgenie/","title":"OpsGenie","text":""},{"location":"services/opsgenie/#url_format","title":"URL Format","text":""},{"location":"services/opsgenie/#url_fields","title":"URL Fields","text":"<ul> <li>Host - The OpsGenie API host. Use 'api.eu.opsgenie.com' for EU instances   Default: <code>api.opsgenie.com</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>Port - The OpsGenie API port.   Default: <code>443</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>APIKey - The OpsGenie API key (Required)   URL part: <code>opsgenie://host:port/apikey/</code> </li> </ul>"},{"location":"services/opsgenie/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom actions that will be available for the alert   Default: empty </p> </li> <li> <p>Alias - Client-defined identifier of the alert   Default: empty </p> </li> <li> <p>Description - Description field of the alert   Default: empty </p> </li> <li> <p>Details - Map of key-value pairs to use as custom properties of the alert   Default: empty </p> </li> <li> <p>Entity - Entity field of the alert that is generally used to specify which domain the Source field of the alert   Default: empty </p> </li> <li> <p>Note - Additional note that will be added while creating the alert   Default: empty </p> </li> <li> <p>Priority - Priority level of the alert. Possible values are P1, P2, P3, P4 and P5   Default: empty </p> </li> <li> <p>Responders - Teams, users, escalations and schedules that the alert will be routed to send notifications   Default: empty </p> </li> <li> <p>Source - Source field of the alert   Default: empty </p> </li> <li> <p>Tags - Tags of the alert   Default: empty </p> </li> <li> <p>Title - notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>User - Display name of the request owner   Default: empty </p> </li> <li> <p>VisibleTo - Teams and users that the alert will become visible to without sending any notification   Default: empty </p> </li> </ul>"},{"location":"services/opsgenie/#creating_a_rest_api_endpoint_in_opsgenie","title":"Creating a REST API endpoint in OpsGenie","text":"<ol> <li> <p>Open up the Integration List page by clicking on Settings =&gt; Integration List within the menu </p> </li> <li> <p>Click API =&gt; Add</p> </li> <li> <p>Make sure Create and Update Access and Enabled are checked and click Save Integration </p> </li> <li> <p>Copy the API Key</p> </li> <li> <p>Format the service URL</p> </li> </ol> <p>The host can be either api.opsgenie.com or api.eu.opsgenie.com depending on the location of your instance. See the OpsGenie documentation for details.</p> <pre><code>opsgenie://api.opsgenie.com/eb243592-faa2-4ba2-a551q-1afdf565c889\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                           token\n</code></pre>"},{"location":"services/opsgenie/#passing_parameters_via_code","title":"Passing parameters via code","text":"<p>If you want to, you can pass additional parameters to the <code>send</code> function.  The following example contains all parameters that are currently supported.</p> <pre><code>service.Send(\"An example alert message\", &amp;types.Params{\n    \"alias\":       \"Life is too short for no alias\",\n    \"description\": \"Every alert needs a description\",\n    \"responders\":  `[{\"id\":\"4513b7ea-3b91-438f-b7e4-e3e54af9147c\",\"type\":\"team\"},{\"name\":\"NOC\",\"type\":\"team\"}]`,\n    \"visibleTo\":   `[{\"id\":\"4513b7ea-3b91-438f-b7e4-e3e54af9147c\",\"type\":\"team\"},{\"name\":\"rocket_team\",\"type\":\"team\"}]`,\n    \"actions\":     \"An action\",\n    \"tags\":        \"tag1 tag2\",\n    \"details\":     `{\"key1\": \"value1\", \"key2\": \"value2\"}`,\n    \"entity\":      \"An example entity\",\n    \"source\":      \"The source\",\n    \"priority\":    \"P1\",\n    \"user\":        \"Dracula\",\n    \"note\":        \"Here is a note\",\n})\n</code></pre>"},{"location":"services/opsgenie/#optional_parameters","title":"Optional parameters","text":"<p>You can optionally specify the parameters in the URL:</p> <p>opsgenie://api.opsgenie.com/eb243592-faa2-4ba2-a551q-1afdf565c889?alias=Life+is+too+short+for+no+alias&amp;description=Every+alert+needs+a+description&amp;actions=An+action&amp;tags=[\"tag1\",\"tag2\"]&amp;entity=An+example+entity&amp;source=The+source&amp;priority=P1&amp;user=Dracula&amp;note=Here+is+a+note</p> <p>Example using the command line:</p> <pre><code>shoutrrr send -u 'opsgenie://api.eu.opsgenie.com/token?tags=[\"tag1\",\"tag2\"]&amp;description=testing&amp;responders=[{\"username\":\"superuser\", \"type\": \"user\"}]&amp;entity=Example Entity&amp;source=Example Source&amp;actions=[\"asdf\", \"bcde\"]' -m \"Hello World6\"\n</code></pre>"},{"location":"services/overview/","title":"Services overview","text":"<p>Click on the service for a more thorough explanation. </p> Service URL format Bark bark://<code>devicekey</code>@<code>host</code> Discord discord://<code>token</code>@<code>id</code>[?thread_id=<code>threadid</code>] Email smtp://<code>username</code>:<code>password</code>@<code>host</code>:<code>port</code>/?from=<code>fromAddress</code>&amp;to=<code>recipient1</code>[,<code>recipient2</code>,...] Gotify gotify://<code>gotify-host</code>/<code>token</code> Google Chat googlechat://chat.googleapis.com/v1/spaces/FOO/messages?key=bar&amp;token=baz IFTTT ifttt://<code>key</code>/?events=<code>event1</code>[,<code>event2</code>,...]&amp;value1=<code>value1</code>&amp;value2=<code>value2</code>&amp;value3=<code>value3</code> Join join://shoutrrr:<code>api-key</code>@join/?devices=<code>device1</code>[,<code>device2</code>, ...][&amp;icon=<code>icon</code>][&amp;title=<code>title</code>] Mattermost mattermost://[<code>username</code>@]<code>mattermost-host</code>/<code>token</code>[/<code>channel</code>] Matrix matrix://<code>username</code>:<code>password</code>@<code>host</code>:<code>port</code>/[?rooms=<code>!roomID1</code>[,<code>roomAlias2</code>]] Ntfy ntfy://<code>username</code>:<code>password</code>@ntfy.sh/<code>topic</code> OpsGenie opsgenie://<code>host</code>/token?responders=<code>responder1</code>[,<code>responder2</code>] Pushbullet pushbullet://<code>api-token</code>[/<code>device</code>/#<code>channel</code>/<code>email</code>] Pushover pushover://shoutrrr:<code>apiToken</code>@<code>userKey</code>/?devices=<code>device1</code>[,<code>device2</code>, ...] Rocketchat rocketchat://[<code>username</code>@]<code>rocketchat-host</code>/<code>token</code>[/<code>channel</code>|<code>@recipient</code>] Slack slack://[<code>botname</code>@]<code>token-a</code>/<code>token-b</code>/<code>token-c</code> Teams teams://<code>group</code>@<code>tenant</code>/<code>altId</code>/<code>groupOwner</code>?host=<code>organization</code>.webhook.office.com Telegram telegram://<code>token</code>@telegram?chats=<code>@channel-1</code>[,<code>chat-id-1</code>,...] Zulip Chat zulip://<code>bot-mail</code>:<code>bot-key</code>@<code>zulip-domain</code>/?stream=<code>name-or-id</code>&amp;topic=<code>name</code> Lark lark://<code>host</code>/<code>token</code>?secret=<code>secret</code>&amp;title=<code>title</code>&amp;link=<code>url</code>"},{"location":"services/overview/#specialized_services","title":"Specialized services","text":"Service Description Logger Writes notification to a configured go <code>log.Logger</code> Generic Webhook Sends notifications directly to a webhook"},{"location":"services/pushbullet/","title":"Pushbullet","text":""},{"location":"services/pushbullet/#url_format","title":"URL Format","text":"<p>pushbullet://<code>api-token</code>[/<code>device</code>/#<code>channel</code>/<code>email</code>]</p>"},{"location":"services/pushbullet/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>pushbullet://token/targets/</code> </li> <li>Targets (Required)   URL part: <code>pushbullet://token/targets/</code> </li> </ul>"},{"location":"services/pushbullet/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li>Title   Default: <code>Shoutrrr notification</code> </li> </ul>"},{"location":"services/pushover/","title":"Pushover","text":""},{"location":"services/pushover/#url_format","title":"URL Format","text":"<p>pushover://shoutrrr:<code>apiToken</code>@<code>userKey</code>/?devices=<code>device1</code>[,<code>device2</code>, ...]</p>"},{"location":"services/pushover/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Token/Key (Required)   URL part: <code>pushover://:token@user/</code> </li> <li>User - User Key (Required)   URL part: <code>pushover://:token@user/</code> </li> </ul>"},{"location":"services/pushover/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices   Default: empty </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/pushover/#getting_the_keys_from_pushover","title":"Getting the keys from Pushover","text":"<p>At your Pushover dashboard you can view your <code>userKey</code> in the top right. </p> <p>The <code>Name</code> column of the device list is what is used to refer to your devices (<code>device1</code> etc.) </p> <p>At the bottom of the same page there are links your applications, where you can find your <code>apiToken</code> </p> <p>The <code>apiToken</code> is displayed at the top of the application page. </p>"},{"location":"services/pushover/#optional_parameters","title":"Optional parameters","text":"<p>You can optionally specify the <code>title</code> and <code>priority</code> parameters in the URL: pushover://shoutrrr:<code>token</code>@<code>userKey</code>/?devices=<code>device</code>&amp;title=Custom+Title&amp;priority=1</p> <p>Note</p> <p>Only supply priority values between -1 and 1, since 2 requires additional parameters that are not supported yet.</p> <p>Please refer to the Pushover API documentation for more information.  </p>"},{"location":"services/rocketchat/","title":"Rocket.chat","text":""},{"location":"services/rocketchat/#url_format","title":"URL Format","text":"<p>rocketchat://[<code>username</code>@]<code>rocketchat-host</code>/<code>token</code>[/<code>channel</code>|<code>@recipient</code>]* </p>"},{"location":"services/rocketchat/#url_fields","title":"URL Fields","text":"<ul> <li>UserName   Default: empty   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Host (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Port (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenA (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenB (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Channel (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> </ul>"},{"location":"services/rocketchat/#queryparam_props","title":"Query/Param Props","text":"<p>The services does not support any query/param props</p>"},{"location":"services/rocketchat/#creating_a_webhook_in_rocketchat","title":"Creating a Webhook in Rocket.chat","text":"<ol> <li> <p>Open up the chat Administration by clicking on Administration menu </p> </li> <li> <p>Open Integrations and then click New </p> </li> <li> <p>Fill in the information for the webhook and click Save. Please don't forget to Enable your integration.  </p> </li> <li> <p>If you did everything correctly, Rocket.chat will give you the URL and Token to your newly created webhook. </p> </li> <li> <p>Format the service URL <pre><code>rocketchat://your-domain.com/8eGdRzc9r4YYNyvge/2XYQcX9NBwJBKfQnphpebPcnXZcPEi32Nt4NKJfrnbhsbRfX\n                             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                           token\n</code></pre></p> </li> </ol>"},{"location":"services/rocketchat/#additional_url_configuration","title":"Additional URL configuration","text":"<p>Rocket.chat provides functionality to post as another user or to another channel / user, compared to the webhook configuration.  To do this, you can add a sender and/or channel / receiver to the service URL.</p> <pre><code>rocketchat://shoutrrrUser@your-domain.com/8eGdRzc9r4YYNyvge/2XYQcX9NBwJBKfQnphpebPcnXZcPEi32Nt4NKJfrnbhsbRfX/shoutrrrChannel\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                sender                                                   token                                   channel\n\nrocketchat://shoutrrrUser@your-domain.com/8eGdRzc9r4YYNyvge/2XYQcX9NBwJBKfQnphpebPcnXZcPEi32Nt4NKJfrnbhsbRfX/@shoutrrrReceiver\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                sender                                                   token                                    receiver\n</code></pre>"},{"location":"services/rocketchat/#passing_parameters_via_code","title":"Passing parameters via code","text":"<p>If you want to, you also have the possibility to pass parameters to the <code>send</code> function.  The following example contains all parameters that are currently supported.</p> <pre><code>params := (*types.Params)(\n    &amp;map[string]string{\n        \"username\": \"overwriteUserName\",\n        \"channel\": \"overwriteChannel\",\n    },\n)\n\nservice.Send(\"this is a message\", params)\n</code></pre> <p>This will overwrite any options, that you passed via URL.</p> <p>For more Rocket.chat Webhooks options see official guide.</p>"},{"location":"services/slack/","title":"Slack","text":"<p>New URL format</p> <p>The URL format for Slack has been changed to allow for API- as well as webhook tokens. Using the old format (<code>slack://xxxx/yyyy/zzzz</code>) will still work as before and will automatically be upgraded to the new format when used.</p> <p>The Slack notification service uses either Slack Webhooks or the  Bot API to send messages.  </p> <p>See the guides for information on how to get your token and channel.</p>"},{"location":"services/slack/#url_format","title":"URL Format","text":"<p>Note that the token uses a prefix to determine the type, usually either <code>hook</code> (for webhooks) or <code>xoxb</code> (for bot API).</p>"},{"location":"services/slack/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Bot token (Required)   URL part: <code>slack://token:token@channel/</code> </li> <li>Channel - Channel to send messages to in Cxxxxxxxxxx format (Required)   URL part: <code>slack://token:token@channel/</code> </li> </ul>"},{"location":"services/slack/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>BotName - Bot name   Default: empty   Aliases: <code>username</code> </p> </li> <li> <p>Color - Message left-hand border color   Default: empty </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>ThreadTS - ts value of the parent message (to send message as reply in thread)   Default: empty </p> </li> <li> <p>Title - Prepended text above the message   Default: empty </p> </li> </ul> <p>Color format</p> <p>The format for the <code>Color</code> prop follows the slack docs but <code>#</code> needs to be escaped as <code>%23</code> when passed in a URL. So <code>#ff8000</code> would be <code>%23ff8000</code> etc.</p>"},{"location":"services/slack/#examples","title":"Examples","text":"<p>Bot API</p> <pre><code>slack://xoxb:123456789012-1234567890123-4mt0t4l1YL3g1T5L4cK70k3N@C001CH4NN3L?color=good&amp;title=Great+News&amp;icon=man-scientist&amp;botname=Shoutrrrbot\n</code></pre> <p>Webhook</p> <pre><code>slack://hook:WNA3PBYV6-F20DUQND3RQ-Webc4MAvoacrpPakR8phF0zi@webhook?color=good&amp;title=Great+News&amp;icon=man-scientist&amp;botname=Shoutrrrbot\n</code></pre>"},{"location":"services/teams/","title":"Teams","text":"<p>New webhook URL format only</p> <p>Shoutrrr now only supports the new Teams webhook URL format with an organization-specific domain.</p> <p>You must specify your organization domain using:</p> <p><pre><code>?host=example.webhook.office.com\n</code></pre> Where <code>example</code> is your organization's short name.</p> <p>Legacy webhook formats (e.g., <code>outlook.office.com</code>) are no longer supported.</p>"},{"location":"services/teams/#url_format","title":"URL Format","text":"<pre><code>teams://group@tenant/altId/groupOwner/extraId?host=organization.webhook.office.com[&amp;color=color][&amp;title=title]\n</code></pre> <p>Where:</p> <ul> <li><code>group</code>: The first UUID component from the webhook URL.</li> <li><code>tenant</code>: The second UUID component from the webhook URL.</li> <li><code>altId</code>: The third component (hex string) from the webhook URL.</li> <li><code>groupOwner</code>: The fourth UUID component from the webhook URL.</li> <li><code>extraId</code>: The fifth component at the end of the webhook URL.</li> <li><code>organization</code>: Your organization name for the webhook domain (required).</li> <li><code>color</code>: Optional hex color code for the message card (e.g., <code>FF0000</code> for red).</li> <li><code>title</code>: Optional title for the message card.</li> </ul>"},{"location":"services/teams/#url_fields","title":"URL Fields","text":"<ul> <li>Group   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>Tenant   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>AltID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>GroupOwner   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>ExtraID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> </ul>"},{"location":"services/teams/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Color   Default: empty </p> </li> <li> <p>Host   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/teams/#setting_up_a_webhook","title":"Setting up a webhook","text":"<p>To use the Microsoft Teams notification service, you need to set up a custom incoming webhook. Follow the instructions in this Microsoft guide.</p>"},{"location":"services/teams/#extracting_the_token","title":"Extracting the token","text":"<p>The token is extracted from your webhook URL:</p> <pre><code>https://&lt;organization&gt;.webhook.office.com/webhookb2/&lt;group&gt;@&lt;tenant&gt;/IncomingWebhook/&lt;altId&gt;/&lt;groupOwner&gt;/&lt;extraId&gt;</code></pre> <p>Important components</p> <p>All parts of the webhook URL are required:</p> <ul> <li><code>organization</code>: Your organization name (e.g., <code>contoso</code>).</li> <li><code>group</code>: First UUID component.</li> <li><code>tenant</code>: Second UUID component.</li> <li><code>altId</code>: Third component (hex string).</li> <li><code>groupOwner</code>: Fourth UUID component.</li> <li><code>extraId</code>: Fifth component.</li> </ul>"},{"location":"services/teams/#example","title":"Example","text":"<pre><code># Original webhook URL:\nhttps://contoso.webhook.office.com/webhookb2/11111111-4444-4444-8444-cccccccccccc@22222222-4444-4444-8444-cccccccccccc/IncomingWebhook/33333333012222222222333333333344/44444444-4444-4444-8444-cccccccccccc/V2ESyij_gAljSoUQHvZoZYzlpAoAXExyOl26dlf1xHEx05\n\n# Shoutrrr URL:\nteams://11111111-4444-4444-8444-cccccccccccc@22222222-4444-4444-8444-cccccccccccc/33333333012222222222333333333344/44444444-4444-4444-8444-cccccccccccc/V2ESyij_gAljSoUQHvZoZYzlpAoAXExyOl26dlf1xHEx05?host=contoso.webhook.office.com&amp;color=FF0000&amp;title=Alert\n</code></pre> <p>In this example:</p> <ul> <li><code>color=FF0000</code> sets a red theme.</li> <li><code>title=Alert</code> adds a custom title to the message card.</li> </ul>"},{"location":"services/telegram/","title":"Telegram","text":""},{"location":"services/telegram/#url_format","title":"URL Format","text":"<p>telegram://<code>token</code>@telegram?chats=<code>channel-1</code>[,<code>chat-id-1</code>,...]</p>"},{"location":"services/telegram/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>telegram://token/</code> </li> </ul>"},{"location":"services/telegram/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Chats - Chat IDs or Channel names (using @channel-name) (Required)   Aliases: <code>channels</code> </p> </li> <li> <p>Notification - If disabled, sends Message silently   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ParseMode - How the text Message should be parsed   Default: <code>None</code>   Possible values: <code>None</code>, <code>Markdown</code>, <code>HTML</code>, <code>MarkdownV2</code> </p> </li> <li> <p>Preview - If disabled, no web page preview will be displayed for URLs   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> </ul>"},{"location":"services/telegram/#getting_a_token_for_telegram","title":"Getting a token for Telegram","text":"<p>Talk to the botfather.</p>"},{"location":"services/telegram/#identifying_the_target_chatschannels","title":"Identifying the target chats/channels","text":"<p>The <code>chats</code> param consists of one or more <code>Chat ID</code>s or <code>channel name</code>s. </p>"},{"location":"services/telegram/#public_channels","title":"Public Channels","text":"<p>The channel names can be retrieved in the telegram client in the <code>Channel info</code> section for public channels.  Replace the <code>t.me/</code> prefix from the link with a <code>@</code>.</p> <p>Note</p> <p>Channels names need to be prefixed by <code>@</code> to identify them as such.</p> <p>Note</p> <p>If your channel only has an invite link (starting with <code>t.me/+</code>), you have to use it's Chat ID (see below)</p> <p>Note</p> <p>A <code>message_thread_id</code> param (reference) can be added, with the format of <code>$chat_id:$message_thread_id</code>. More info on how to obtain the <code>message_thread_id</code>.</p>"},{"location":"services/telegram/#chats","title":"Chats","text":"<p>Private channels, Group chats and private chats are identified by <code>Chat ID</code>s. Unfortunatly, they are generally not visible in the telegram clients. The easiest way to retrieve them is by using the <code>shoutrrr generate telegram</code> command which will guide you through creating a URL with your target chats.</p> <p>Tip</p> <p>You can use the <code>nickfedor/shoutrrr</code> image in docker to run it without download/installing the <code>shoutrrr</code> CLI using: <pre><code>docker run --rm -it nickfedor/shoutrrr generate telegram\n</code></pre></p>"},{"location":"services/telegram/#asking_shoutrrrbot","title":"Asking @shoutrrrbot","text":"<p>Another way of retrieving the Chat IDs, is by forwarding a message from the target chat to the @shoutrrrbot. It will reply with the Chat ID for the chat where the forwarded message was originally posted. Note that it will not work correctly for Group chats, as those messages are just seen as being posted by a user, not in a specific chat. Instead you can use the second method, which is to invite the @shoutrrrbot into your group chat and address a message to it (start the message with @shoutrrrbot). You can then safely kick the bot from the group. </p> <p>The bot should be constantly online, unless it's usage exceeds the free tier on GCP. It's source is available at github.com/nicholas-fedor/shoutrrrbot.</p>"},{"location":"services/telegram/#optional_parameters","title":"Optional parameters","text":"<p>You can optionally specify the <code>notification</code>, <code>parseMode</code> and <code>preview</code> parameters in the URL:  </p> <p><pre>telegram://<code>token</code>@<code>telegram</code>/?channels=<code>channel</code>&amp;notification=no&amp;preview=false&amp;parseMode=html</pre></p> <p>See the telegram documentation for more information.</p> <p>Note</p> <p><code>preview</code> and <code>notification</code> are inverted in regards to their API counterparts (<code>disable_web_page_preview</code> and <code>disable_notification</code>)</p>"},{"location":"services/telegram/#parse_mode_and_title","title":"Parse Mode and Title","text":"<p>If a parse mode is specified, the message needs to be escaped as per the corresponding sections in Formatting options.</p> <p>When a title has been specified, it will be prepended to the message, but this is only supported for the <code>HTML</code> parse mode. Note that, if no parse mode is specified, the message will be escaped and sent using <code>HTML</code>.</p> <p>Since the markdown modes are really hard to escape correctly, it's recommended to stick to <code>HTML</code> parse mode.</p>"},{"location":"services/zulip/","title":"Zulip Chat","text":""},{"location":"services/zulip/#url_format","title":"URL Format","text":"<p>The shoutrrr service URL should look like this:</p> <p>zulip://<code>botmail</code>:<code>botkey</code>@<code>host</code>/?stream=<code>stream</code>&amp;topic=<code>topic</code></p>"},{"location":"services/zulip/#url_fields","title":"URL Fields","text":"<ul> <li>BotMail - Bot e-mail address (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>BotKey - API Key (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>Host - API server hostname (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> </ul>"},{"location":"services/zulip/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Stream   Default: empty </p> </li> <li> <p>Topic   Default: empty   Aliases: <code>title</code> </p> </li> </ul> <p>Note</p> <p>Since <code>botmail</code>  is a mail address you need to URL escape the <code>@</code> in it to <code>%40</code>.</p>"},{"location":"services/zulip/#examples","title":"Examples","text":"<p>Stream and topic are both optional and can be given as parameters to the Send method:</p> <pre><code>  sender, _ := shoutrrr.CreateSender(url)\n\n  params := make(types.Params)\n  params[\"stream\"] = \"mystream\"\n  params[\"topic\"] = \"This is my topic\"\n\n  sender.Send(message, &amp;params)\n</code></pre> <p>Example service URL</p> <p>zulip://my-bot%40zulipchat.com:correcthorsebatterystable@example.zulipchat.com?stream=foo&amp;topic=bar</p>"},{"location":"services/bark/config/","title":"Config","text":""},{"location":"services/bark/config/#url_fields","title":"URL Fields","text":"<ul> <li>DeviceKey - The key for each device (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Host - Server hostname and port (Required)   URL part: <code>bark://:devicekey@host/path/</code> </li> <li>Path - Server path   Default: <code>/</code>   URL part: <code>bark://:devicekey@host/path/</code> </li> </ul>"},{"location":"services/bark/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Badge - The number displayed next to App icon   Default: <code>0</code> </p> </li> <li> <p>Category - Reserved field, no use yet   Default: empty </p> </li> <li> <p>Copy - The value to be copied   Default: empty </p> </li> <li> <p>Group - The group of the notification   Default: empty </p> </li> <li> <p>Icon - An url to the icon, available only on iOS 15 or later   Default: empty </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Sound - Value from https://github.com/Finb/Bark/tree/master/Sounds   Default: empty </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>URL - Url that will jump when click notification   Default: empty </p> </li> </ul>"},{"location":"services/discord/config/","title":"Config","text":""},{"location":"services/discord/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>discord://token@webhookid/</code> </li> <li>WebhookID (Required)   URL part: <code>discord://token@webhookid/</code> </li> </ul>"},{"location":"services/discord/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Avatar - Override the webhook default avatar with specified URL   Default: empty   Aliases: <code>avatarurl</code> </p> </li> <li> <p>Color - The color of the left border for plain messages   Default: <code>0x50D9ff</code> </p> </li> <li> <p>ColorDebug - The color of the left border for debug messages   Default: <code>0x7b00ab</code> </p> </li> <li> <p>ColorError - The color of the left border for error messages   Default: <code>0xd60510</code> </p> </li> <li> <p>ColorInfo - The color of the left border for info messages   Default: <code>0x2488ff</code> </p> </li> <li> <p>ColorWarn - The color of the left border for warning messages   Default: <code>0xffc441</code> </p> </li> <li> <p>JSON - Whether to send the whole message as the JSON payload instead of using it as the 'content' field   Default: \u274c <code>No</code> </p> </li> <li> <p>SplitLines - Whether to send each line as a separate embedded item   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ThreadID - The thread ID to send the message to   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>Username - Override the webhook default username   Default: empty </p> </li> </ul>"},{"location":"services/generic/config/","title":"Config","text":""},{"location":"services/generic/config/#url_fields","title":"URL Fields","text":""},{"location":"services/generic/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>ContentType - The value of the Content-Type header   Default: <code>application/json</code> </p> </li> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>MessageKey - The key that will be used for the message value   Default: <code>message</code> </p> </li> <li> <p>RequestMethod   Default: <code>POST</code> </p> </li> <li> <p>Template - The template used for creating the request payload   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> <li> <p>TitleKey - The key that will be used for the title value   Default: <code>title</code> </p> </li> </ul>"},{"location":"services/googlechat/config/","title":"Config","text":""},{"location":"services/googlechat/config/#url_fields","title":"URL Fields","text":""},{"location":"services/googlechat/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Key (Required)  </p> </li> <li> <p>Path (Required)  </p> </li> <li> <p>Token (Required)  </p> </li> <li> <p>Host   Default: <code>chat.googleapis.com</code> </p> </li> </ul>"},{"location":"services/gotify/config/","title":"Config","text":""},{"location":"services/gotify/config/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Server hostname (and optionally port) (Required)   URL part: <code>gotify://host:port/path/token</code> </li> <li>Path - Server subpath   Default: empty   URL part: <code>gotify://host:port/path/token</code> </li> <li>Token - Application token (Required)   URL part: <code>gotify://host:port/path/token</code> </li> </ul>"},{"location":"services/gotify/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: <code>Shoutrrr notification</code> </p> </li> </ul>"},{"location":"services/ifttt/config/","title":"Config","text":""},{"location":"services/ifttt/config/#url_fields","title":"URL Fields","text":"<ul> <li>WebHookID (Required)   URL part: <code>ifttt://webhookid/</code> </li> </ul>"},{"location":"services/ifttt/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Events (Required)  </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>UseMessageAsValue - Sets the corresponding value field to the notification message   Default: <code>2</code> </p> </li> <li> <p>UseTitleAsValue - Sets the corresponding value field to the notification title   Default: <code>0</code> </p> </li> <li> <p>Value1   Default: empty </p> </li> <li> <p>Value2   Default: empty </p> </li> <li> <p>Value3   Default: empty </p> </li> </ul>"},{"location":"services/join/config/","title":"Config","text":""},{"location":"services/join/config/#url_fields","title":"URL Fields","text":"<ul> <li>APIKey (Required)   URL part: <code>join://:apikey/</code> </li> </ul>"},{"location":"services/join/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices - Comma separated list of device IDs (Required)  </p> </li> <li> <p>Icon - Icon URL   Default: empty </p> </li> <li> <p>Title - If set creates a notification   Default: empty </p> </li> </ul>"},{"location":"services/lark/config/","title":"Config","text":""},{"location":"services/lark/config/#url_fields","title":"URL Fields","text":"<ul> <li>Host - Custom bot URL Host   Default: <code>open.larksuite.com</code>   URL part: <code>lark://host/path/</code> </li> <li>Path - Custom bot token (Required)   URL part: <code>lark://host/path/</code> </li> </ul>"},{"location":"services/lark/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Link - Optional link URL   Default: empty </p> </li> <li> <p>Secret - Custom bot secret   Default: empty </p> </li> <li> <p>Title - Message Title   Default: empty </p> </li> </ul>"},{"location":"services/logger/config/","title":"Config","text":""},{"location":"services/logger/config/#url_fields","title":"URL Fields","text":""},{"location":"services/logger/config/#queryparam_props","title":"Query/Param Props","text":"<p>The services does not support any query/param props</p>"},{"location":"services/matrix/config/","title":"Config","text":""},{"location":"services/matrix/config/#url_fields","title":"URL Fields","text":"<ul> <li>User - Username or empty when using access token   Default: empty   URL part: <code>matrix://user:password@host/</code> </li> <li>Password - Password or access token (Required)   URL part: <code>matrix://user:password@host/</code> </li> <li>Host (Required)   URL part: <code>matrix://user:password@host/</code> </li> </ul>"},{"location":"services/matrix/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Rooms - Room aliases, or with ! prefix, room IDs   Default: empty   Aliases: <code>room</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/mattermost/config/","title":"Config","text":""},{"location":"services/mattermost/config/#url_fields","title":"URL Fields","text":"<ul> <li>UserName - Override webhook user   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Host - Mattermost server host (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Token - Webhook token (Required)   URL part: <code>mattermost://username@host:port/token/channel</code> </li> <li>Channel - Override webhook channel   Default: empty   URL part: <code>mattermost://username@host:port/token/channel</code> </li> </ul>"},{"location":"services/mattermost/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>DisableTLS   Default: \u274c <code>No</code> </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender (not used)   Default: empty </p> </li> </ul>"},{"location":"services/ntfy/config/","title":"Config","text":""},{"location":"services/ntfy/config/#url_fields","title":"URL Fields","text":"<ul> <li>Username - Auth username   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Password - Auth password   Default: empty   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Host - Server hostname and port   Default: <code>ntfy.sh</code>   URL part: <code>ntfy://username:password@host/topic/</code> </li> <li>Topic - Target topic name (Required)   URL part: <code>ntfy://username:password@host/topic/</code> </li> </ul>"},{"location":"services/ntfy/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom user action buttons for notifications, see https://docs.ntfy.sh/publish/#action-buttons   Default: empty </p> </li> <li> <p>Attach - URL of an attachment, see attach via URL   Default: empty </p> </li> <li> <p>Cache - Cache messages   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Click - Website opened when notification is clicked   Default: empty </p> </li> <li> <p>Delay - Timestamp or duration for delayed delivery, see https://docs.ntfy.sh/publish/#scheduled-delivery   Default: empty   Aliases: <code>at</code>, <code>in</code> </p> </li> <li> <p>Email - E-mail address for e-mail notifications   Default: empty </p> </li> <li> <p>Filename - File name of the attachment   Default: empty </p> </li> <li> <p>Firebase - Send to firebase   Default: \u2714 <code>yes</code> </p> </li> <li> <p>Icon - URL to use as notification icon   Default: empty </p> </li> <li> <p>Priority - Message priority with 1=min, 3=default and 5=max   Default: <code>default</code>   Possible values: <code>Min</code>, <code>Low</code>, <code>Default</code>, <code>High</code>, <code>Max</code> </p> </li> <li> <p>Scheme - Server protocol, http or https   Default: <code>https</code> </p> </li> <li> <p>Tags - List of tags that may or not map to emojis   Default: empty </p> </li> <li> <p>Title - Message title   Default: empty </p> </li> </ul>"},{"location":"services/opsgenie/config/","title":"Config","text":""},{"location":"services/opsgenie/config/#url_fields","title":"URL Fields","text":"<ul> <li>Host - The OpsGenie API host. Use 'api.eu.opsgenie.com' for EU instances   Default: <code>api.opsgenie.com</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>Port - The OpsGenie API port.   Default: <code>443</code>   URL part: <code>opsgenie://host:port/apikey/</code> </li> <li>APIKey - The OpsGenie API key (Required)   URL part: <code>opsgenie://host:port/apikey/</code> </li> </ul>"},{"location":"services/opsgenie/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Actions - Custom actions that will be available for the alert   Default: empty </p> </li> <li> <p>Alias - Client-defined identifier of the alert   Default: empty </p> </li> <li> <p>Description - Description field of the alert   Default: empty </p> </li> <li> <p>Details - Map of key-value pairs to use as custom properties of the alert   Default: empty </p> </li> <li> <p>Entity - Entity field of the alert that is generally used to specify which domain the Source field of the alert   Default: empty </p> </li> <li> <p>Note - Additional note that will be added while creating the alert   Default: empty </p> </li> <li> <p>Priority - Priority level of the alert. Possible values are P1, P2, P3, P4 and P5   Default: empty </p> </li> <li> <p>Responders - Teams, users, escalations and schedules that the alert will be routed to send notifications   Default: empty </p> </li> <li> <p>Source - Source field of the alert   Default: empty </p> </li> <li> <p>Tags - Tags of the alert   Default: empty </p> </li> <li> <p>Title - notification title, optionally set by the sender   Default: empty </p> </li> <li> <p>User - Display name of the request owner   Default: empty </p> </li> <li> <p>VisibleTo - Teams and users that the alert will become visible to without sending any notification   Default: empty </p> </li> </ul>"},{"location":"services/pushbullet/config/","title":"Config","text":""},{"location":"services/pushbullet/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>pushbullet://token/targets/</code> </li> <li>Targets (Required)   URL part: <code>pushbullet://token/targets/</code> </li> </ul>"},{"location":"services/pushbullet/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li>Title   Default: <code>Shoutrrr notification</code> </li> </ul>"},{"location":"services/pushover/config/","title":"Config","text":""},{"location":"services/pushover/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Token/Key (Required)   URL part: <code>pushover://:token@user/</code> </li> <li>User - User Key (Required)   URL part: <code>pushover://:token@user/</code> </li> </ul>"},{"location":"services/pushover/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Devices   Default: empty </p> </li> <li> <p>Priority   Default: <code>0</code> </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/rocketchat/config/","title":"Config","text":""},{"location":"services/rocketchat/config/#url_fields","title":"URL Fields","text":"<ul> <li>UserName   Default: empty   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Host (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Port (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenA (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>TokenB (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> <li>Channel (Required)   URL part: <code>rocketchat://username@host:port/tokena/tokenb/channel</code> </li> </ul>"},{"location":"services/rocketchat/config/#queryparam_props","title":"Query/Param Props","text":"<p>The services does not support any query/param props</p>"},{"location":"services/signal/config/","title":"Config","text":""},{"location":"services/signal/config/#url_fields","title":"URL Fields","text":""},{"location":"services/signal/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Password - Password for HTTP Basic Auth (Required)  </p> </li> <li> <p>Recipients - Recipient phone numbers or group IDs (Required)   Aliases: <code>to</code> </p> </li> <li> <p>Source - Source phone number (with country code) (Required)  </p> </li> <li> <p>Token - API token for Bearer authentication (Required)   Aliases: <code>apikey</code> </p> </li> <li> <p>User - Username for HTTP Basic Auth (Required)  </p> </li> <li> <p>DisableTLS - Disable TLS for Signal REST API connection   Default: \u274c <code>No</code> </p> </li> <li> <p>Host - Signal REST API server hostname or IP   Default: <code>localhost</code> </p> </li> <li> <p>Port - Signal REST API server port   Default: <code>8080</code> </p> </li> </ul>"},{"location":"services/slack/config/","title":"Config","text":""},{"location":"services/slack/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token - API Bot token (Required)   URL part: <code>slack://token:token@channel/</code> </li> <li>Channel - Channel to send messages to in Cxxxxxxxxxx format (Required)   URL part: <code>slack://token:token@channel/</code> </li> </ul>"},{"location":"services/slack/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>BotName - Bot name   Default: empty   Aliases: <code>username</code> </p> </li> <li> <p>Color - Message left-hand border color   Default: empty </p> </li> <li> <p>Icon - Use emoji or URL as icon (based on presence of http(s):// prefix)   Default: empty   Aliases: <code>icon_emoji</code>, <code>icon_url</code> </p> </li> <li> <p>ThreadTS - ts value of the parent message (to send message as reply in thread)   Default: empty </p> </li> <li> <p>Title - Prepended text above the message   Default: empty </p> </li> </ul>"},{"location":"services/smtp/config/","title":"Config","text":""},{"location":"services/smtp/config/#url_fields","title":"URL Fields","text":"<ul> <li>Username - SMTP server username   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Password - SMTP server password or hash (for OAuth2)   Default: empty   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Host - SMTP server hostname or IP address (Required)   URL part: <code>smtp://username:password@host:port/</code> </li> <li>Port - SMTP server port, common ones are 25, 465, 587 or 2525   Default: <code>25</code>   URL part: <code>smtp://username:password@host:port/</code> </li> </ul>"},{"location":"services/smtp/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>FromAddress - E-mail address that the mail are sent from (Required)   Aliases: <code>from</code> </p> </li> <li> <p>ToAddresses - List of recipient e-mails (Required)   Aliases: <code>to</code> </p> </li> <li> <p>Auth - SMTP authentication method   Default: <code>Unknown</code>   Possible values: <code>None</code>, <code>Plain</code>, <code>CRAMMD5</code>, <code>Unknown</code>, <code>OAuth2</code> </p> </li> <li> <p>ClientHost - SMTP client hostname   Default: <code>localhost</code> </p> </li> <li> <p>Encryption - Encryption method   Default: <code>Auto</code>   Possible values: <code>None</code>, <code>ExplicitTLS</code>, <code>ImplicitTLS</code>, <code>Auto</code> </p> </li> <li> <p>FromName - Name of the sender   Default: empty </p> </li> <li> <p>Subject - The subject of the sent mail   Default: <code>Shoutrrr Notification</code>   Aliases: <code>title</code> </p> </li> <li> <p>UseHTML - Whether the message being sent is in HTML   Default: \u274c <code>No</code> </p> </li> <li> <p>UseStartTLS - Whether to use StartTLS encryption   Default: \u2714 <code>Yes</code>   Aliases: <code>starttls</code> </p> </li> </ul>"},{"location":"services/teams/config/","title":"Config","text":""},{"location":"services/teams/config/#url_fields","title":"URL Fields","text":"<ul> <li>Group   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>Tenant   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>AltID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>GroupOwner   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> <li>ExtraID   Default: empty   URL part: <code>teams://group@tenant/altid/groupowner/extraid</code> </li> </ul>"},{"location":"services/teams/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Color   Default: empty </p> </li> <li> <p>Host   Default: empty </p> </li> <li> <p>Title   Default: empty </p> </li> </ul>"},{"location":"services/telegram/config/","title":"Config","text":""},{"location":"services/telegram/config/#url_fields","title":"URL Fields","text":"<ul> <li>Token (Required)   URL part: <code>telegram://token/</code> </li> </ul>"},{"location":"services/telegram/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Chats - Chat IDs or Channel names (using @channel-name) (Required)   Aliases: <code>channels</code> </p> </li> <li> <p>Notification - If disabled, sends Message silently   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>ParseMode - How the text Message should be parsed   Default: <code>None</code>   Possible values: <code>None</code>, <code>Markdown</code>, <code>HTML</code>, <code>MarkdownV2</code> </p> </li> <li> <p>Preview - If disabled, no web page preview will be displayed for URLs   Default: \u2714 <code>Yes</code> </p> </li> <li> <p>Title - Notification title, optionally set by the sender   Default: empty </p> </li> </ul>"},{"location":"services/wecom/config/","title":"Config","text":""},{"location":"services/wecom/config/#url_fields","title":"URL Fields","text":""},{"location":"services/wecom/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Key - Bot webhook key (Required)  </p> </li> <li> <p>MentionedList - Users to mention (comma-separated) (Required)  </p> </li> <li> <p>MentionedMobileList - Mobile numbers to mention (comma-separated) (Required)  </p> </li> </ul>"},{"location":"services/zulip/config/","title":"Config","text":""},{"location":"services/zulip/config/#url_fields","title":"URL Fields","text":"<ul> <li>BotMail - Bot e-mail address (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>BotKey - API Key (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> <li>Host - API server hostname (Required)   URL part: <code>zulip://botmail:botkey@host:port/</code> </li> </ul>"},{"location":"services/zulip/config/#queryparam_props","title":"Query/Param Props","text":"<p>Props can be either supplied using the params argument, or through the URL using <code>?key=value&amp;key=value</code> etc.</p> <ul> <li> <p>Stream   Default: empty </p> </li> <li> <p>Topic   Default: empty   Aliases: <code>title</code> </p> </li> </ul>"}]}